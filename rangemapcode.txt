________________________________
rangemapdefpoly.java

//Austin Sypolt
//Range Map Project

import java.awt.*;
import java.awt.event.*;


public class rangemapdefpoly extends Frame
{  public static void main(String[] args){new rangemapdefpoly();}
 
   rangemapdefpoly()
   {  super("Robot Range Map");
      addWindowListener(new WindowAdapter()
      {public void windowClosing(WindowEvent e){System.exit(0);}});
      setSize(900, 600);
      add("Center", new rangemapcvdefpoly());
      //setCursor(Cursor.getPredefinedCursor(CROSSHAIR_CURSOR));
      show();
   }
}


__________________________________
rangemapcvdefpoly.java

//Austin Sypolt
//Range Map Project

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.lang.Math;
import java.util.Scanner;
import java.io.File;

class rangemapcvdefpoly extends Canvas
{  Vector v = new Vector();
   float x0, y0, rWidth = 10.0F, rHeight = 7.5F, pixelSize;
   boolean ready = true;
   int centerX, centerY;

   rangemapcvdefpoly()
   {  addMouseListener(new MouseAdapter()
      {  public void mousePressed(MouseEvent evt)
         {  float xA = fx(evt.getX()), yA = fy(evt.getY());
			if (ready) 
            {  v.removeAllElements();
               x0 = xA; y0 = yA;
               ready = false;
            }
            float dx = xA - x0, dy = yA - y0;
            if (v.size() > 0 && 
               dx * dx + dy * dy < 4 * pixelSize * pixelSize)
               ready = true;
            else
               v.addElement(new Point2D(xA, yA));
            repaint();
         }
      });
   }

   void initgr()  
   {  Dimension d = getSize();
	  int maxX = d.width - 1, maxY = d.height - 1;
      pixelSize = Math.max(rWidth/maxX, rHeight/maxY);
      centerX = maxX/2; centerY = maxY/2;
   }
   
   int iX(float x){return Math.round(centerX + x/pixelSize);}
   int iY(float y){return Math.round(centerY - y/pixelSize);}
   float fx(int X){return (X - centerX) * pixelSize;}
   float fy(int Y){return (centerY - Y) * pixelSize;}   

   public void paint(Graphics g)
   {  Dimension d = getSize();
	  int maxX = d.width - 1, maxY = d.height - 1;
      pixelSize = Math.max(rWidth/maxX, rHeight/maxY);
      centerX = maxX/2; centerY = maxY/2;
	  
	  // System.out.println("Enter the number of sides for your polygon: ");
	  //Scanner scan = new Scanner(System.in);
	  //int shapeSides = scan.nextInt();
	  
	  //System.out.println("Enter the heading of the robot (0-360): ");
	  //int heading = scan.nextInt();
	  
	  //System.out.println("Please enter the angle orientation of the robot:");
	  
	  int heading = 20;
	  int sensors = 25;
	  int[] shapeCoordinates;
	  shapeCoordinates = new int[]{200, 200, 200, 500, 500, 500, 500, 200};
	  
	  if(shapeCoordinates.length >= 4){
	     g.drawLine(shapeCoordinates[0], shapeCoordinates[1], shapeCoordinates[2], shapeCoordinates[3]);
		}
	  if(shapeCoordinates.length >= 6){ //triangle
		 g.drawLine(shapeCoordinates[2], shapeCoordinates[3], shapeCoordinates[4], shapeCoordinates[5]);
		 if(shapeCoordinates.length < 8)
			 g.drawLine(shapeCoordinates[4], shapeCoordinates[5], shapeCoordinates[0], shapeCoordinates[1]);
	  }
	  if(shapeCoordinates.length >= 8){ //square
		 g.drawLine(shapeCoordinates[4], shapeCoordinates[5], shapeCoordinates[6], shapeCoordinates[7]);
		 if(shapeCoordinates.length < 10)
			g.drawLine(shapeCoordinates[6], shapeCoordinates[7], shapeCoordinates[0], shapeCoordinates[1]);
	  }
	  else{
		  System.out.println("Not enough coordinates");
	  }
	  
      int n = v.size();
      if (n == 0) return;
      Point2D A = (Point2D)(v.elementAt(0)); 
	  double nextPoint = 360 / sensors; //Divide up the circle with n sensors
	  double sin;
	  double cos;
	  int xx;
	  int yy;
	  g.fillRect(0, 0, 1000, 200);
	  g.fillRect(0, 0, 200, 1000);
	  g.fillRect(500, 0, 500, 1000);
	  g.fillRect(0,500,1000,500);
	  //g.drawString("Polygon Coordinates: (" + shapeCoordinates[
	  //g.drawOval(iX(A.x)-15, iY(A.y)-15, 30, 30);
   	  
	  for (int i = 0; i<sensors; i++){
		  g.setColor(Color.black);
		  sin = Math.sin(i*nextPoint);
		  cos = Math.cos(i*nextPoint);
		  xx = (int)(iX(A.x) * cos - iY(A.y) * sin);
		  //while (xx > 200) xx--;
	      yy = (int)(iX(A.x) * sin + iY(A.y) * cos);
		  //while(yy > 200) yy--;
		  
		  g.drawLine(iX(A.x), iY(A.y), 4*xx, 4*yy);
				
		
	  }	
	  g.setColor(Color.white);
	  g.fillOval(iX(A.x)-15, iY(A.y)-15, 30, 30);
	  
	   g.setColor(Color.black);
	  g.drawOval(iX(A.x)-15, iY(A.y)-15, 30, 30);
	  g.drawLine(iX(A.x)-15, iY(A.y)-15, iX(A.x), iY(A.y));
	  
	  g.setColor(Color.white);
	  g.drawString("Orientation of Robot: " + heading + " degrees", maxX-180, maxY-30);
	  g.drawString("Number of sensors: " + sensors, maxX - 130, maxY-50); 
	  g.drawString("Robot Coordinates: (" + iX(A.x) + "," + iY(A.y) + ")", maxX-165, maxY-70);
   }
}

______________________________
rangemappoint2d.java

//Austin Sypolt
//Range Map Project

class rangemappoint2d
{  float x, y;
   rangemappoint2d(float x, float y){this.x = x; this.y = y;}
}